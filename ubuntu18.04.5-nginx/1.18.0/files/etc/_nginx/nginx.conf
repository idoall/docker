# 使用的用户和组
user  work;


# 指定工作衍生进程数(一般等于CPU的总核数或总核数的两倍)
worker_processes  auto;


daemon off;


# 指定错误日志存放的路径，错误日志的记录级别可为debug，info，notice，warn，error，crit
error_log /home/work/_logs/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;


# 指定pid文件存放的路径
#pid        logs/nginx.pid;


events {
    # 使用的I/O模型,Linux系统推荐使用epoll模型，FreeBSD推荐使用kqueue模型
    # 在我的Mac OSX 11系统中报错 invalid event type "kueue"
    use epoll; 
    # 允许连接数
    worker_connections  1024;
}


http {
    # MIME文件类型
    include       mime.types;
    default_type  application/octet-stream;


    # 设置使用的字符集，如果一个网站有多种字符集，请不要随便设置，应让程序员在HTML代码中通过meta标签进行设置
    charset utf-8;

    #隐藏响应header和错误通知中的版本号
    server_tokens off;


    # 自定义一个日志格式main(也可以写在server各自的区间)
    # log_format 格式名称(nginx提供了一个默认的combined日志格式,name名称不能重复) 格式规则
    # 由于nginx是反向代理服务器，$remote_addr拿到的是代理服务器的IP
    # $http_x_forwarded_for才是用户的真实IP
    # $remote_user记录客户端用户名称
    # $time_local记录访问时间以及时区
    # $request记录访问的URL以及协议
    # $status记录请求的状态，例如302,404等
    # $body_bytes_sent记录发送给客户端的文件大小
    # $http_referer记录访问来源
    # $http_user_agent记录客户端浏览器相关的信息
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '"$gzip_ratio" $request_time $bytes_sent $request_length '
                        '"$upstream_addr" $upstream_status $upstream_response_time';
    log_format cache '***$time_local ' '***$upstream_cache_status ' '***Cache-Control: $upstream_http_cache_control ' '***Expires: $upstream_http_expires ' '***"$request" ($status) ' '***"$http_user_agent" ';


    # 访问日志
    access_log logs/access.log main;

    # 服务器名字的hash表大小
    # 保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.
    server_names_hash_bucket_size 128;

    # 客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。
    client_header_buffer_size 32k;

    client_body_buffer_size 512k;

    # 客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。
    large_client_header_buffers 4 64k;

    # 设定通过nginx上传文件的大小
    client_max_body_size 300m;

    # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    # sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。
    sendfile on;

    # 此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用
    tcp_nopush on;

    # 激活tcp_nodelay，内核会等待将更多的字节组成一个数据包，从而提高I/O性能
    tcp_nodelay on;

    # keepalive超时时间。
    keepalive_timeout 65;
    


    # fastcgi配置
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;


    # gzip配置
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
    gzip_comp_level 2;    #压缩等级,1压缩比最小，处理速度最快；9压缩比最大，传输速度快，但处理最慢，也比较消耗cpu资源。
    gzip_types text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml;
    gzip_vary on;   # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_disable "MSIE [1-6]\.";


    # cache
    proxy_connect_timeout 5;
    proxy_read_timeout 60;
    proxy_send_timeout 5;
    proxy_buffer_size 16k;
    proxy_buffers 4 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;
    proxy_temp_path /home/work/nginxtemp_dir; 
    #设置Web缓存区名称为cache_one，内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。
    proxy_cache_path /home/work/nginxcache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;
    ##end##

    include /home/work/_app/nginx/conf/conf.d/*.conf;

}